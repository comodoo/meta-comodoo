This README file contains information on the contents of the
comodoo layer.

Please see the corresponding sections below for details.


Dependencies
============

This layer depends on:

  URI: git://git.openembedded.org/bitbake
  branch: krogoth

  URI: git://git.openembedded.org/openembedded-core
  layers: meta
  branch: krogoth

  URI: git://github.com/mozilla-japan/meta-browser.git
  branch: firefox-45.0esr

  URI: git://git.yoctoproject.org/meta-cloud-services
  layers: meta-openstack
  branch: master

  URI: git://git.yoctoproject.org/meta-eca
  layers: meta-eca
  branch: master

  URI: git://git.openembedded.org/meta-openembedded
  layers: meta-gnome, meta-oe, meta-python
  branch: krogoth

  URI: git://github.com/sarnold/meta-small-arm-extra.git
  branch: master


Table of Contents
=================

   I. Adding the comodoo layer to your build
  II. Build configuration for RaspberryPi 3
 III. HOWTO launch the kiosk
  IV. Know issues during WIFI configuration

I. Adding the comodoo layer to your build
=========================================

In order to use this layer, you need to make the build system aware of
it.

Assuming the comodoo layer exists at the top-level of your
yocto build tree, you can add it to the build system by adding the
location of the comodoo layer to bblayers.conf, along with any
other layers needed. e.g.:

BBLAYERS ?= " \
    /path/to/yocto/meta \
    /path/to/yocto/meta-poky \
    /path/to/yocto/meta-yocto-bsp \
    /path/to/yocto/meta-browser \
    /path/to/yocto/meta-cloud-services/meta-openstack \
    /path/to/yocto/meta-comodoo/meta-comodoo \
    /path/to/yocto/meta-eca/meta-eca \
    /path/to/yocto/meta-openembedded/meta-gnome \
    /path/to/yocto/meta-openembedded/meta-oe \
    /path/to/yocto/meta-openembedded/meta-python \
    /path/to/yocto/meta-small-arm-extra \
  "

Now, let see with some more detail how to build the comodoo image
for a Raspberry Pi 3:

1. [OPTIONAL] sudo apt-get install autoconf2.13
2. git clone git://git.yoctoproject.org/poky
   cd poky/
   git checkout -b krogoth origin/krogoth
3. git clone git://git.openembedded.org/meta-openembedded
   cd meta-openembedded/
   git checkout -b krogoth origin/krogoth
   cd ..
4. git clone git://git.yoctoproject.org/meta-cloud-services
5. git clone git://github.com/sarnold/meta-small-arm-extra.git
6. git clone git://git.yoctoproject.org/meta-eca
7. git clone git://git.yoctoproject.org/meta-raspberrypi
   # No need to checkout another branch, only master branch has raspberrypi3.conf
8. git clone git://github.com/mozilla-japan/meta-browser.git
   # Default branch is already firefox-45.0esr
9. git clone git://github.com/indisoluble/meta-comodoo.git
   # Or git clone git@github.com:indisoluble/meta-comodoo.git
10. source oe-init-build-env
11. cd conf/
12.nano bblayers.conf
   # Edit var BBLAYERS as follows:
BBLAYERS ?= "
    /path/to/yocto/meta \
    /path/to/yocto/meta-poky \
    /path/to/yocto/meta-yocto-bsp \
    /path/to/yocto/meta-browser \
    /path/to/yocto/meta-cloud-services/meta-openstack \
    /path/to/yocto/meta-comodoo/meta-comodoo \
    /path/to/yocto/meta-comodoo/meta-rpi-fixed-fb \
    /path/to/yocto/meta-eca/meta-eca \
    /path/to/yocto/meta-openembedded/meta-gnome \
    /path/to/yocto/meta-openembedded/meta-oe \
    /path/to/yocto/meta-openembedded/meta-python \
    /path/to/yocto/meta-raspberrypi \
    /path/to/yocto/meta-small-arm-extra \
  "

14. nano local.conf
   # Add following line to the end of the file:
MACHINE ?= "raspberrypi3"

PREFERRED_PROVIDER_virtual/libgl = "mesa"
PREFERRED_PROVIDER_virtual/libgles2 = "mesa"
PREFERRED_PROVIDER_virtual/egl = "mesa"
PREFERRED_PROVIDER_virtual/mesa = "mesa"

BBMASK_append = " \
    /meta-cloud-services/meta-openstack/recipes-connectivity/ \
    /meta-cloud-services/meta-openstack/recipes-core/ \
    /meta-cloud-services/meta-openstack/recipes-devtools/ruby/ \
    /meta-cloud-services/meta-openstack/recipes-extended/ \
    /meta-cloud-services/meta-openstack/recipes-graphics/ \
    /meta-cloud-services/meta-openstack/recipes-httpd/ \
    /meta-cloud-services/meta-openstack/recipes-kernel/ \
    /meta-cloud-services/meta-openstack/recipes-support/ \
    /meta-eca/meta-eca/recipes-connectivity/ \
    /meta-eca/meta-eca/recipes-core/ \
    /meta-eca/meta-eca/recipes-devtools/ \
    /meta-eca/meta-eca/recipes-eca/ \
    /meta-eca/meta-eca/recipes-kernel/ \
    /meta-eca/meta-eca/recipes-multimedia/ \
    /meta-eca/meta-eca/recipes-support/ \
    /meta-small-arm-extra/recipes-bsp \
    /meta-small-arm-extra/recipes-core \
    /meta-small-arm-extra/recipes-devtools/opkg \
    /meta-small-arm-extra/recipes-extended \
    /meta-small-arm-extra/recipes-graphics \
    /meta-small-arm-extra/recipes-kernel \
    /meta-small-arm-extra/recipes-qt \
    /meta-small-arm-extra/recipes-support \
"

15. cd ..
16. bitbake comodoo-image-pos

The first image generated with this procedure might not work. In some
cases, after transferring the image to the SD card, inserting it in the raspberrypi
and powering it up, when we connect the ethernet cable to the port, the LEDs
in it do not light. Without a connection, there is not much we can do with the
raspberrypi. My recomendation in this case is:

1. cd /path/to/yocto/build
2. rm -fr tmp/
3. bitbake comodoo-image-pos

This time, the building process will be a lot faster and the new image generated
in /path/to/yocto/build/tmp/deploy/images/raspberrypi3/ should be ok.


II. Build configuration for RaspberryPi 3
=========================================

BB_VERSION        = "1.30.0"
BUILD_SYS         = "x86_64-linux"
NATIVELSBSTRING   = "universal"
TARGET_SYS        = "arm-poky-linux-gnueabi"
MACHINE           = "raspberrypi3"
DISTRO            = "poky"
DISTRO_VERSION    = "2.1.1"
TUNE_FEATURES     = "arm armv7ve vfp thumb neon vfpv4 callconvention-hard cortexa7"
TARGET_FPU        = "hard"
meta              
meta-poky         
meta-yocto-bsp    = "krogoth:8c69f7d56cbd496aa01ba0738675a170826a536b"
meta-browser      = "firefox-45.0esr:14199ac070905b101e7bb0919748986c33374649"
meta-openstack    = "master:6043a4a17dc5ca9080dac7789e38620b7b1aa372"
meta-comodoo      = "master:ca2803c73e5afa26e5a9c257f8b66c177e82a88d"
meta-eca          = "master:77c41b86a36fa65250deb16b13b13945afc52be4"
meta-gnome        
meta-oe           
meta-python       = "krogoth:895b25b387cae428c38990f4d2747603ee9dc92d"
meta-raspberrypi  = "master:cc64d6324d1543f009f0c010d720e74b7cb9f5d5"
meta-small-arm-extra = "master:f0f64dcea0dfe5aafacb5b607002cc2acb6aa512"


III. HOWTO launch the kiosk
===========================

1. Switch on the RaspberryPi.
2. Connect by SSH to the RaspberryPi.
3. On the SSH terminal, launch 'x11vnc &'.
4. When the VNC server is ready, open a VNC client on your host computer.
5. Back on the SSH terminal, execute
   '/opt/comodoo/bin/comodoo-network-configuration.py &'
6. On the VNC client window will appear a list of available WIFI's,
   as well as the Ethernet connection we are currently using.
7. Select your WIFI network and, in the next screen, type twice the
   passphrase for the selected WIFI.
8. If everything is OK, next to your WIFI will appear a green circle.
   Then press 'Continue' on the top right corner.
9. Close the VNC client window as well as the SSH session.
10. Open a new SSH connection using the IP address assigned by the
    WIFI router and repeat steps 3 & 4.
11. Now, execute '/opt/comodoo/bin/comodoo-posboxless.sh &'.
12. And then, execute '/opt/comodoo/bin/comodoo-kiosk.py &'
13. On the VNC client window, Firefox will be launched on kiosk mode and
    it will load the Odoo login page.

In case, you are not interested in login in Odoo service (for example,
if you are running an Odoo Docker image), you can also pass an URL to
'comodoo-kiosk.py': '/opt/comodoo/bin/comodoo-kiosk.py --url <URL> &'.
In this way, Firefox will load the specified webpage instead of the
default page.


IV. Know issues during WIFI configuration
=========================================

* Type a passphrase smaller than 8 characteres:
  In this case, when the list of available WIFIs is shown again,
  yours is shown with a red circle and there is no way to connect
  to it, even if you type the right password.
  If you are in this situation: 1ยบ make sure your passphrase has
  between 8 and 64 characters, 2ยบ restart the device, 3ยบ try
  again with the right passphrase.

* WIFI is disconnected or the decive lost connection for a short
  period of time:
  It should reconnect on its own but it does not. I am afraid this
  is a WIP so, until we fix this problem, you have to reboot your
  device. On the bright side, it will automatically reconnect after
  the reboot.
